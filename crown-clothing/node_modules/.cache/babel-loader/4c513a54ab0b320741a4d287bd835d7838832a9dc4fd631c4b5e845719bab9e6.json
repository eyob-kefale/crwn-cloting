{"ast":null,"code":"var _jsxFileName = \"H:\\\\mern\\\\andrei\\\\crwn-cloting\\\\src\\\\context\\\\cart.context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst addCartItem = (cartItems, productToAdd) => {\n  //find if cartItems contains productToAdd\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  //if found, increament qauntity\n  if (existingCartItem) {\n    setIncreament({\n      increament\n    } + 1);\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? {\n      ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n  setIncreament({\n    increament\n  } + 1);\n  //return new array with modified cartItems/ new cart item\n  return [...cartItems, {\n    ...productToAdd,\n    quantity: 1\n  }];\n};\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  increament: 0,\n  setIncreament: () => {}\n});\nexport const CartProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const [increament, setIncreament] = useState(null);\n  const addItemToCart = productToAdd => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    cartItems,\n    increament,\n    setIncreament\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"41RVFfjZ6PjDNqWMo07DbdvBmi8=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","setIncreament","increament","map","quantity","CartContext","isCartOpen","setIsCartOpen","addItemToCart","CartProvider","children","setCartItems","value"],"sources":["H:/mern/andrei/crwn-cloting/src/context/cart.context.jsx"],"sourcesContent":["import { createContext, useState } from 'react'\r\nconst addCartItem = (cartItems, productToAdd) => {\r\n    //find if cartItems contains productToAdd\r\n    const existingCartItem = cartItems.find(\r\n        (cartItem) => cartItem.id === productToAdd.id\r\n    );\r\n\r\n    //if found, increament qauntity\r\n    if (existingCartItem) {\r\n     setIncreament({increament}+1)\r\n        return cartItems.map((cartItem) =>\r\n            cartItem.id === productToAdd.id\r\n                ? { ...cartItem, quantity: cartItem.quantity + 1 }\r\n                : cartItem\r\n        );\r\n    }\r\n     setIncreament({increament}+1)\r\n    //return new array with modified cartItems/ new cart item\r\n    return [...cartItems, {...productToAdd, quantity:1}];\r\n}\r\n\r\nexport const CartContext = createContext({\r\n    isCartOpen: false,\r\n    setIsCartOpen: () => {},\r\n    cartItems: [],\r\n    addItemToCart: () => {},\r\n    increament:0,\r\n    setIncreament:() => {}\r\n})\r\n\r\nexport const CartProvider = ({ children }) => {\r\n    const [isCartOpen, setIsCartOpen] = useState(false)\r\n    const [cartItems, setCartItems] = useState([])\r\n    const [increament,setIncreament]=useState(null)\r\n\r\n    const addItemToCart = (productToAdd) => {\r\n        setCartItems(addCartItem(cartItems, productToAdd));\r\n\r\n    }\r\n    const value = { isCartOpen, setIsCartOpen,addItemToCart,cartItems,increament,setIncreament};\r\n\r\n    return (\r\n        <CartContext.Provider value={value}>{children}</CartContext.Provider>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAA;AAC/C,MAAMC,WAAW,GAAG,CAACC,SAAS,EAAEC,YAAY,KAAK;EAC7C;EACA,MAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAI,CAClCC,QAAQ,IAAKA,QAAQ,CAACC,EAAE,KAAKJ,YAAY,CAACI,EAAE,CAChD;;EAED;EACA,IAAIH,gBAAgB,EAAE;IACrBI,aAAa,CAAC;MAACC;IAAU,CAAC,GAAC,CAAC,CAAC;IAC1B,OAAOP,SAAS,CAACQ,GAAG,CAAEJ,QAAQ,IAC1BA,QAAQ,CAACC,EAAE,KAAKJ,YAAY,CAACI,EAAE,GACzB;MAAE,GAAGD,QAAQ;MAAEK,QAAQ,EAAEL,QAAQ,CAACK,QAAQ,GAAG;IAAE,CAAC,GAChDL,QAAQ,CACjB;EACL;EACCE,aAAa,CAAC;IAACC;EAAU,CAAC,GAAC,CAAC,CAAC;EAC9B;EACA,OAAO,CAAC,GAAGP,SAAS,EAAE;IAAC,GAAGC,YAAY;IAAEQ,QAAQ,EAAC;EAAC,CAAC,CAAC;AACxD,CAAC;AAED,OAAO,MAAMC,WAAW,gBAAGb,aAAa,CAAC;EACrCc,UAAU,EAAE,KAAK;EACjBC,aAAa,EAAE,MAAM,CAAC,CAAC;EACvBZ,SAAS,EAAE,EAAE;EACba,aAAa,EAAE,MAAM,CAAC,CAAC;EACvBN,UAAU,EAAC,CAAC;EACZD,aAAa,EAAC,MAAM,CAAC;AACzB,CAAC,CAAC;AAEF,OAAO,MAAMQ,YAAY,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACrC,MAAM,CAACJ,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACE,SAAS,EAAEgB,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,UAAU,EAACD,aAAa,CAAC,GAACR,QAAQ,CAAC,IAAI,CAAC;EAE/C,MAAMe,aAAa,GAAIZ,YAAY,IAAK;IACpCe,YAAY,CAACjB,WAAW,CAACC,SAAS,EAAEC,YAAY,CAAC,CAAC;EAEtD,CAAC;EACD,MAAMgB,KAAK,GAAG;IAAEN,UAAU;IAAEC,aAAa;IAACC,aAAa;IAACb,SAAS;IAACO,UAAU;IAACD;EAAa,CAAC;EAE3F,oBACI,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEW,KAAM;IAAA,UAAEF;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AAE7E,CAAC;AAAA,GAdYD,YAAY;AAAA,KAAZA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}